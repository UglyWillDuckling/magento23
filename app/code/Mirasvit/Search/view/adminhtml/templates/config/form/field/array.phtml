<?php
$htmlId = $block->getHtmlId() ? $block->getHtmlId() : '_' . uniqid();
?>
<tr>
    <td class="label">
        <label><?= $this->getElement()->getLabel() ?></label>
    </td>
    <td colspan="3" class="value">
        <div id="grid<?= $htmlId ?>">
            <div class="search__config-field-array">
                <table class="admin__control-table">
                    <thead>
                    <tr>
                        <?php foreach ($block->getColumns() as $columnName => $column): ?>
                            <th><?= $column['label'] ?></th>
                        <?php endforeach ?>
                        <th class="col-actions"></th>
                    </tr>
                    </thead>
                    <tfoot>
                    <tr>
                        <td colspan="<?= count($block->getColumns()) + 1 ?>" class="col-actions-add">
                            <button id="addToEndBtn<?= $htmlId ?>" class="action-add" type="button">
                                <span><?= $block->getAddButtonLabel() ?></span>
                            </button>
                        </td>
                    </tr>
                    </tfoot>
                    <tbody id="addRow<?= $htmlId ?>"></tbody>
                </table>
            </div>
            <input type="hidden" name="<?= $block->getElement()->getName() ?>[__empty]" value=""/>

            <script>
                require([
                        'mage/template',
                        'prototype'
                    ], function (mageTemplate) {
                        // create row creator
                        window.arrayRow<?= $htmlId ?> = {
                            // define row prototypeJS template
                            template: mageTemplate(
                                '<tr id="<%- _id %>">'
                                <?php foreach ($block->getColumns() as $columnName => $column): ?>
                                + '<td>'
                                + '<?= $block->renderCellTemplate($columnName) ?>'
                                + '<\/td>'
                                <?php endforeach ?>

                                <?php if ($block->isAddAfter()): ?>
                                + '<td><button class="action-add" type="button" id="addAfterBtn<%- _id %>"><span><?php  echo __('Add after') ?><\/span><\/button><\/td>'
                                <?php endif; ?>

                                + '<td class="col-actions"><button onclick="arrayRow<?= $htmlId ?>.del(\'<%- _id %>\')" class="action-delete" type="button"><span><?= __('Delete') ?><\/span><\/button><\/td>'
                                +'<\/tr>'
                            ),

                            add: function(rowData, insertAfterId) {
                                // generate default template data
                                var templateValues;

                                // Prepare template values
                                if (rowData) {
                                    templateValues = rowData;
                                } else {
                                    var d = new Date();
                                    templateValues = {
                                    <?php foreach ($block->getColumns() as $columnName => $column): ?>
                                    <?= $columnName ?>: '',
                                        'option_extra_attrs': {},
                                    <?php endforeach ?>
                                    _id: '_' + d.getTime() + '_' + d.getMilliseconds()
                                };
                            }

                            // Insert new row after specified row or at the bottom
                            if (insertAfterId) {
                                Element.insert($(insertAfterId), {after: this.template(templateValues)});
                            } else {
                                Element.insert($('addRow<?php /* @escapeNotVerified */ echo $htmlId ?>'), {bottom: this.template(templateValues)});
                            }

                            // Fill controls with data
                            if (rowData) {
                                var rowInputElementNames = Object.keys(rowData.column_values);
                                for (var i = 0; i < rowInputElementNames.length; i++) {
                                    if ($(rowInputElementNames[i])) {
                                        $(rowInputElementNames[i]).value = rowData.column_values[rowInputElementNames[i]];
                                    }
                                }
                            }

                            // Add event for {addAfterBtn} button
                            <?php if ($block->isAddAfter()): ?>
                            Event.observe('addAfterBtn' + templateValues._id, 'click', this.add.bind(this, false, templateValues._id));
                            <?php endif; ?>
                        },

                        del: function(rowId) {
                            $(rowId).remove();
                        }
                    }

                // bind add action to "Add" button in last row
                Event.observe('addToEndBtn<?php /* @escapeNotVerified */ echo $htmlId ?>', 'click', arrayRow<?php /* @escapeNotVerified */ echo $htmlId ?>.add.bind(arrayRow<?php /* @escapeNotVerified */ echo $htmlId ?>, false, false));

                // add existing rows
                <?php
                foreach ($block->getArrayRows() as $_rowId => $_row) {
                    /* @escapeNotVerified */ echo "arrayRow{$htmlId}.add(" . $_row->toJson() . ");\n";
                }
                ?>

                // Toggle the grid availability, if element is disabled (depending on scope)
                <?php if ($block->getElement()->getDisabled()):?>
                toggleValueElements({checked: true}, $('grid<?php /* @escapeNotVerified */ echo $htmlId; ?>').parentNode);
                <?php endif;?>
                });
            </script>
        </div>
        <p class="note"><span><?=$block->getElement()->getComment() ?></span></p>
    </td>
</tr>